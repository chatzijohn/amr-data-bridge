// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: water_supplies.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getWaterSupplyByNumber = `-- name: GetWaterSupplyByNumber :one
SELECT id, "supplyNumber", geometry, "waterMeterSerialNumber", "currentImage", "previousImage", "createdAt", "updatedAt" FROM public."waterSupplies"
WHERE "supplyNumber" = $1
LIMIT 1
`

func (q *Queries) GetWaterSupplyByNumber(ctx context.Context, supplynumber string) (WaterSupply, error) {
	row := q.db.QueryRow(ctx, getWaterSupplyByNumber, supplynumber)
	var i WaterSupply
	err := row.Scan(
		&i.ID,
		&i.SupplyNumber,
		&i.Geometry,
		&i.WaterMeterSerialNumber,
		&i.CurrentImage,
		&i.PreviousImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertWaterSupply = `-- name: InsertWaterSupply :one
INSERT INTO public."waterSupplies" (
    "supplyNumber",
    geometry,
    "waterMeterSerialNumber"
)
VALUES (
    $1,
    ST_SetSRID(ST_MakePoint($2, $3), 4326),
    $4
)
RETURNING id, "supplyNumber", geometry, "waterMeterSerialNumber", "currentImage", "previousImage", "createdAt", "updatedAt"
`

type InsertWaterSupplyParams struct {
	SupplyNumber           string
	Longitude              interface{}
	Latitude               interface{}
	WaterMeterSerialNumber pgtype.Text
}

func (q *Queries) InsertWaterSupply(ctx context.Context, arg InsertWaterSupplyParams) (WaterSupply, error) {
	row := q.db.QueryRow(ctx, insertWaterSupply,
		arg.SupplyNumber,
		arg.Longitude,
		arg.Latitude,
		arg.WaterMeterSerialNumber,
	)
	var i WaterSupply
	err := row.Scan(
		&i.ID,
		&i.SupplyNumber,
		&i.Geometry,
		&i.WaterMeterSerialNumber,
		&i.CurrentImage,
		&i.PreviousImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWaterSupply = `-- name: UpdateWaterSupply :exec
UPDATE public."waterSupplies"
SET
    geometry = ST_SetSRID(ST_MakePoint($1, $2), 4326),
    "waterMeterSerialNumber" = $3
WHERE "supplyNumber" = $4
`

type UpdateWaterSupplyParams struct {
	Longitude              interface{}
	Latitude               interface{}
	WaterMeterSerialNumber pgtype.Text
	SupplyNumber           string
}

func (q *Queries) UpdateWaterSupply(ctx context.Context, arg UpdateWaterSupplyParams) error {
	_, err := q.db.Exec(ctx, updateWaterSupply,
		arg.Longitude,
		arg.Latitude,
		arg.WaterMeterSerialNumber,
		arg.SupplyNumber,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: water_meters.sql

package db

import (
	"context"
)

const getActiveWaterMeters = `-- name: GetActiveWaterMeters :many
SELECT id, "devEUI", "serialNumber", "brandName", "ltPerPulse", "currentReading", "isActive", "alarmStatus", "noFlow", "deviceHandshake", "deviceLogging", "serverHandshake", "serverLogging", "inactivityTimeout", "lastSeen", rssi, snr, "spreadingFactor", "gatewayId", "createdAt", "updatedAt" FROM public."waterMeters"
WHERE "isActive" = true
ORDER BY "id" DESC
`

func (q *Queries) GetActiveWaterMeters(ctx context.Context) ([]WaterMeter, error) {
	rows, err := q.db.Query(ctx, getActiveWaterMeters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WaterMeter
	for rows.Next() {
		var i WaterMeter
		if err := rows.Scan(
			&i.ID,
			&i.DevEUI,
			&i.SerialNumber,
			&i.BrandName,
			&i.LtPerPulse,
			&i.CurrentReading,
			&i.IsActive,
			&i.AlarmStatus,
			&i.NoFlow,
			&i.DeviceHandshake,
			&i.DeviceLogging,
			&i.ServerHandshake,
			&i.ServerLogging,
			&i.InactivityTimeout,
			&i.LastSeen,
			&i.Rssi,
			&i.Snr,
			&i.SpreadingFactor,
			&i.GatewayId,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

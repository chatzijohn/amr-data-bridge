// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: water_meters.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getWaterMeters = `-- name: GetWaterMeters :many

SELECT id, "devEUI", "serialNumber", "brandName", "ltPerPulse", "currentReading", "isActive", "alarmStatus", "noFlow", "deviceHandshake", "deviceLogging", "serverHandshake", "serverLogging", "inactivityTimeout", "lastSeen", rssi, snr, "spreadingFactor", "gatewayId", "createdAt", "updatedAt"
FROM public."waterMeters"
WHERE (
  $2::boolean IS NULL
  OR "isActive" = $2::boolean
)
ORDER BY "lastSeen" DESC NULLS LAST
LIMIT $1
`

type GetWaterMetersParams struct {
	Limit  int32
	Active pgtype.Bool
}

// Optional filters:
//   - limit: int (nil = unlimited)
//   - active: boolean (nil = all)
func (q *Queries) GetWaterMeters(ctx context.Context, arg GetWaterMetersParams) ([]WaterMeter, error) {
	rows, err := q.db.Query(ctx, getWaterMeters, arg.Limit, arg.Active)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WaterMeter
	for rows.Next() {
		var i WaterMeter
		if err := rows.Scan(
			&i.ID,
			&i.DevEUI,
			&i.SerialNumber,
			&i.BrandName,
			&i.LtPerPulse,
			&i.CurrentReading,
			&i.IsActive,
			&i.AlarmStatus,
			&i.NoFlow,
			&i.DeviceHandshake,
			&i.DeviceLogging,
			&i.ServerHandshake,
			&i.ServerLogging,
			&i.InactivityTimeout,
			&i.LastSeen,
			&i.Rssi,
			&i.Snr,
			&i.SpreadingFactor,
			&i.GatewayId,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
